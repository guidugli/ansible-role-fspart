---
- name: Review and fix file permissions under /var/log
  tags:
    - var-log-perm-fix
  block:
    - name: Find if any file under /var/log need to have the permission fixed
      ansible.builtin.command: >
        find /var/log -type f -perm /g=xw,o=rwx -o -type d -perm /g=w,o=wx -print
      register: fs_cmd_result
      changed_when: false

    - name: Copy variable
      ansible.builtin.set_fact:
        fs_filtered_result: "{{ fs_cmd_result.stdout_lines }}"

    - name: Filter entries set to be excluded
      ansible.builtin.set_fact:
        fs_filtered_result: '{{ fs_filtered_result | reject("match", item) | list }}'
      loop: "{{ fspart_log_exception }}"
      when: fspart_log_exception is defined and (fspart_log_exception | length > 0)

    - name: Display result
      ansible.builtin.debug:
        msg:
          - "------- FILES THAT WILL BE FIXED -------"
          - "{{ fs_filtered_result }}"
          - "----------------------------------------"

    - name: Ensure log files permissions are correct (no access to others, group can only read)
      ansible.builtin.file:
        path: "{{ item }}"
        mode: o-rwx,g-w
      when:
        - fs_filtered_result | length > 0
        - fs_log_files_fix_enabled
      loop: "{{ fs_filtered_result }}"

#Not doing this on the other sections, so to be consistent, commenting this
#    - name: Re-run scan to check if problems were fixed
#      ansible.builtin.command: >
#        find /var/log -type f -perm /g=xw,o=rwx -o -type d -perm /g=w,o=rwx -print
#      register: fs_cmd_result_fixed
#      changed_when: false
#      when:
#        - fs_log_files_fix_enabled

#    - name: Copy variable
#      ansible.builtin.set_fact:
#        fs_filtered_result: "{{ fs_cmd_result_fixed.stdout_lines }}"
#      when:
#        - fs_log_files_fix_enabled

#    - name: Filter entries set to be excluded
#      ansible.builtin.set_fact:
#        fs_filtered_result: '{{ fs_filtered_result | reject("match", item) | list }}'
#      loop: "{{ fspart_log_exception }}"
#      when:
#        - fspart_log_exception is defined
#        - fspart_log_exception | length > 0
#        - fs_log_files_fix_enabled
#
#    - name: Display Final Result
#      ansible.builtin.debug:
#        msg:
#          - "------- FINAL RESULT AFTER ATTEMPT FIX -------"
#          - "{{ fs_filtered_result }}"
#          - "----------------------------------------"
#      failed_when: fs_cmd_result_fixed.stdout | length > 0 or fs_cmd_result_fixed.rc != 0
#      when:
#        - fs_filtered_result | length > 0
#        - fs_log_files_fix_enabled

- name: Ensure no world writable files exist
  tags:
    - world-writable-fix
  block:
    - name: Search for world writable files
      ansible.builtin.shell: |
        set -o pipefail
        df --local -P | grep -v '/run/user' | grep -v '/tmp' | grep -v '/dev' |
        awk '{if (NR!=1) print $6}' | xargs -I '{}' find '{}' -xdev -type f -perm -0002
      args:
        executable: /bin/bash
      register: fs_cmd_result
      changed_when: false

    - name: Copy variable
      ansible.builtin.set_fact:
        fs_filtered_result: "{{ fs_cmd_result.stdout_lines }}"

    - name: Filter entries set to be excluded
      ansible.builtin.set_fact:
        fs_filtered_result: '{{ fs_filtered_result | reject("match", item) | list }}'
      loop: "{{ fs_world_writeable_excludes }}"
      when: fs_world_writeable_excludes is defined and (fs_world_writeable_excludes | length > 0)

    - name: Display result
      ansible.builtin.debug:
        msg:
          - "------- FILES THAT CAN BE FIXED -------"
          - "{{ fs_filtered_result }}"
          - "---------------------------------------"

    - name: Ensure files cannot be written by everyone
      ansible.builtin.file:
        path: "{{ item }}"
        mode: o-w
      when: (fs_filtered_result | length > 0) and fs_world_writeable_fix_enabled
      loop: "{{ fs_filtered_result }}"

# Ensure no unowned files exist
# Stop execution with failure if any exists
- name: Ensure no unowned files exist
  tags:
    - check-unowned-files
  block:
    - name: Find any unowned files
      ansible.builtin.shell: |
        set -o pipefail
        /usr/bin/df --local -P | grep -v '/run/user' |
        /usr/bin/awk {' if (NR!=1) print $6'} | grep -v '/dev' | grep -v /sys |
        /usr/bin/xargs -I '{}' find '{}' -xdev -nouser |
        grep -v overlay | grep -v '/dev' | grep -v '/sys' | grep -v '/proc' |
        grep -v '/opt/var/lib/containers' | grep -v .local/share/containers
      args:
        executable: /bin/bash
      register: fs_cmd_result
      changed_when: false
      failed_when: false

    - name: Print any unowned files found
      ansible.builtin.debug:
        msg:
          - "------- UNOWNED FILES FOUND -------"
          - "{{ fs_cmd_result.stdout_lines }}"
          - "---------------------------------------"
      changed_when: false
      failed_when: false
      when: fs_cmd_result.stdout | length > 0

    - name: Unowned files found
      ansible.builtin.fail:
        msg: Unowned files found
      when:
        - fs_unowned_detection_enabled
        - fs_cmd_result.stdout | length > 0

# Ensure no ungrouped files exist
# Stop execution with failure if any exists
# On containers it is common to have devices
# under /dev without group
- name: Ensure no ungrouped files exist
  vars:
    iscontainer: "{{ ansible_virtualization_type in ['docker', 'lxc', 'containerd', 'container'] }}"
  tags:
    - check-ungrouped-files
  block:
    - name: Find any ungrouped files
      ansible.builtin.shell: |
        set -o pipefail
        /usr/bin/df --local -P | grep -v '/run/user' |
        /usr/bin/awk {' if (NR!=1) print $6'} | grep -v '/dev' | grep -v '/sys' |
        {{ 'grep -vE ^/dev$ | ' if iscontainer else '' }} /usr/bin/xargs -I '{}' find '{}' -xdev -nogroup |
        grep -v overlay | grep -v '/dev' | grep -v '/sys' | grep -v '/proc'
      args:
        executable: /bin/bash
      register: fs_cmd_result
      changed_when: false
      failed_when: false

    - name: Print any ungrouped files found
      ansible.builtin.debug:
        msg:
          - "------- UNGROUPED FILES FOUND -------"
          - "{{ fs_cmd_result.stdout_lines }}"
          - "---------------------------------------"
      changed_when: false
      failed_when: false
      when: fs_cmd_result.stdout | length > 0

    - name: Ungrouped files found
      ansible.builtin.fail:
        msg: Ungrouped files found
      when:
        - fs_ungrouped_detection_enabled
        - fs_cmd_result.stdout | length > 0

# Will just show a list of SUID files
# for the user to manually review
- name: List SUID files
  tags:
    - show-suid-files
  block:
    - name: Find any SUID files
      ansible.builtin.shell: |
        set -o pipefail
        df --local -P | grep -v '/run/user' | awk '{if (NR!=1) print $6}' |
        xargs -I '{}' find '{}' -xdev -type f -perm -4000 2>/dev/null
      args:
        executable: /bin/bash
      register: fs_cmd_result
      changed_when: false
      failed_when: false

    - name: Print any SUID files found
      ansible.builtin.debug:
        msg:
          - "------- SUID FILES FOUND -------"
          - "{{ fs_cmd_result.stdout_lines }}"
          - "---------------------------------------"
      changed_when: false
      failed_when: false
      when: fs_cmd_result.stdout | length > 0

# Will just show a list of SGID files
# for the user to manually review
- name: List SGID files
  tags:
    - show-sgid-files
  block:
    - name: Find any SGID files
      ansible.builtin.shell: |
        set -o pipefail
        df --local -P | grep -v /run/user | awk '{if (NR!=1) print $6}' |
        xargs -I '{}' find '{}' -xdev -type f -perm -2000 2>/dev/null
      args:
        executable: /bin/bash
      register: fs_cmd_result
      changed_when: false
      failed_when: false

    - name: Print any SGID files found
      ansible.builtin.debug:
        msg:
          - "------- SGID FILES FOUND -------"
          - "{{ fs_cmd_result.stdout_lines }}"
          - "---------------------------------------"
      changed_when: false
      failed_when: false
      when: fs_cmd_result.stdout | length > 0
